name: Issue Management

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  pull_request:
    types: [opened, edited, labeled, unlabeled]

permissions:
  issues: write
  pull-requests: write

jobs:
  label-issue:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Label new issues
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const labels = [];
            
            // Auto-label based on title patterns
            if (issue.title.toLowerCase().includes('[bug]')) {
              labels.push('bug');
            } else if (issue.title.toLowerCase().includes('[feature]')) {
              labels.push('enhancement');
            } else if (issue.title.toLowerCase().includes('[question]')) {
              labels.push('question');
            }
            
            // Auto-label based on body content
            const body = issue.body.toLowerCase();
            if (body.includes('stage 1') || body.includes('stage-1')) {
              labels.push('stage-1');
            } else if (body.includes('stage 2') || body.includes('stage-2')) {
              labels.push('stage-2');
            } else if (body.includes('stage 3') || body.includes('stage-3')) {
              labels.push('stage-3');
            }
            
            if (body.includes('cli') || body.includes('command')) {
              labels.push('cli');
            }
            
            if (body.includes('desktop') || body.includes('gui')) {
              labels.push('desktop');
            }
            
            if (body.includes('documentation') || body.includes('docs')) {
              labels.push('documentation');
            }
            
            // Add good first issue label for simple bugs/features
            if (labels.includes('bug') && body.includes('simple')) {
              labels.push('good first issue');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }

  welcome-contributor:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Welcome new contributors
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: context.payload.sender.login,
              state: 'all'
            });
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: context.payload.sender.login,
              state: 'all'
            });
            
            const isFirstContribution = pullRequests.length === 0 && issues.length <= 1;
            
            if (isFirstContribution && context.payload.issue) {
              const welcomeMessage = `ðŸ‘‹ Welcome to GitSwitch! Thanks for opening your first issue.
              
              A few quick tips:
              - Check out our [Contributing Guide](https://github.com/aman-dhakar-191/GitSwitch/blob/main/CONTRIBUTING.md)
              - Browse our [documentation](https://github.com/aman-dhakar-191/GitSwitch/tree/main/docs) for development guides
              - Join our [discussions](https://github.com/aman-dhakar-191/GitSwitch/discussions) for questions and ideas
              
              We'll review your issue and get back to you soon! ðŸš€`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: welcomeMessage
              });
            }
            
            if (isFirstContribution && context.payload.pull_request) {
              const welcomeMessage = `ðŸŽ‰ Thanks for your first contribution to GitSwitch!
              
              Your pull request will be reviewed by our maintainers. While you wait:
              - Make sure all tests pass
              - Check that your code follows our style guidelines
              - Update documentation if needed
              
              Thanks for helping make GitSwitch better! ðŸ”„`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: welcomeMessage
              });
            }